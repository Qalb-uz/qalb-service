name: Deploy to Dev Server

# Trigger the workflow on push events to the 'dev' branch
on:
  push:
    branches:
      - dev # Change this if your development branch has a different name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest # Specifies the runner environment for the Actions job itself

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master # Popular action for SSH commands
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # port: 22 # Optional: Uncomment and change if your SSH port is different
          script: |
            # Print diagnostic information
            echo "Current directory: $(pwd)"
            echo "Home directory: $HOME"
            echo "Listing home directory:"
            ls -la $HOME

            # Check if the project directory exists
            PROJ_DIR="${{ secrets.PROJECT_PATH_ON_SERVER }}"
            echo "Checking if project directory exists: $PROJ_DIR"

            if [ ! -d "$PROJ_DIR" ]; then
              echo "Project directory does not exist. Creating it..."
              mkdir -p "$PROJ_DIR"

              # Clone the repository if directory was created
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJ_DIR"
              if [ $? -ne 0 ]; then
                # Try with SSH if HTTPS fails
                echo "HTTPS clone failed, trying SSH..."
                git clone git@github.com:${{ github.repository }}.git "$PROJ_DIR"
                if [ $? -ne 0 ]; then
                  echo "Failed to clone repository. Please check your repository URL and permissions."
                  exit 1
                fi
              fi
            fi

            # Navigate to the project directory on the server
            echo "Navigating to project directory..."
            cd "$PROJ_DIR"
            if [ $? -ne 0 ]; then echo "Failed to navigate to project directory"; exit 1; fi

            # Print directory contents
            echo "Project directory contents:"
            ls -la

            # Ensure we are on the correct branch
            echo "Checking out dev branch..."
            git checkout dev
            if [ $? -ne 0 ]; then echo "Failed to checkout dev branch"; exit 1; fi

            # Stash any local changes
            echo "Stashing any local changes..."
            git stash

            # Set Git to use HTTPS instead of SSH if needed
            echo "Configuring git remote..."
            REMOTE_URL=$(git config --get remote.origin.url)
            if [[ $REMOTE_URL == *"git@github.com"* ]]; then
              REPO_NAME=$(echo $REMOTE_URL | sed 's/.*github.com://g' | sed 's/\.git//g')
              git remote set-url origin https://github.com/${REPO_NAME}.git
            fi

            # Pull the latest changes from the dev branch
            echo "Pulling latest changes..."
            git fetch --all
            git reset --hard origin/dev
            if [ $? -ne 0 ]; then echo "Failed to pull changes"; exit 1; fi

            # Update submodules if any
            echo "Updating submodules..."
            git submodule update --init --recursive

            # Build Docker images on the server
            echo "Building Docker image on the server..."
            docker build --platform linux/amd64 -t tenxegineer/qalb-service:dev .
            if [ $? -ne 0 ]; then echo "Failed to build Docker image"; exit 1; fi

            # Zero-downtime deployment strategy
            echo "Performing zero-downtime deployment..."

            # Get the current container ID if it exists
            CURRENT_CONTAINER=$(docker ps --filter "name=qalb-service" -q)

            # Start the new container
            echo "Starting new container..."
            docker-compose -f docker-compose.yml up -d --no-deps --scale qalb-service=1 --no-recreate --renew-anon-volumes
            if [ $? -ne 0 ]; then echo "Failed to start new container"; exit 1; fi

            # Wait for the new container to be healthy (adjust as needed)
            echo "Waiting for new container to be ready..."
            sleep 10

            # Check if the new container is running
            NEW_CONTAINER=$(docker ps --filter "name=qalb-service" -q)
            if [ -z "$NEW_CONTAINER" ]; then
              echo "New container failed to start properly"; exit 1;
            fi

            # If we had a previous container and it's different from the new one, stop it
            if [ ! -z "$CURRENT_CONTAINER" ] && [ "$CURRENT_CONTAINER" != "$NEW_CONTAINER" ]; then
              echo "Stopping old container..."
              docker stop $CURRENT_CONTAINER
              docker rm $CURRENT_CONTAINER
            fi

            # Optional: Clean up dangling Docker images (images without tags)
            echo "Cleaning up dangling images..."
            docker image prune -f

            echo "Deployment successful!"
