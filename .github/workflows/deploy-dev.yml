name: Deploy to Dev Server

# Trigger the workflow on push events to the 'dev' branch
on:
  push:
    branches:
      - dev # Change this if your development branch has a different name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest # Specifies the runner environment for the Actions job itself

    steps:
      - name: Checkout code # Checks out the code in the runner (optional but good practice)
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master # Popular action for SSH commands
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # port: 22 # Optional: Uncomment and change if your SSH port is different
          script: |
            # Get repository name from GitHub context
            REPO_NAME="${GITHUB_REPOSITORY#*/}"

            # Store the parent directory path and the repo directory name
            PARENT_DIR=$(dirname ${{ secrets.PROJECT_PATH_ON_SERVER }})
            REPO_DIR=$(basename ${{ secrets.PROJECT_PATH_ON_SERVER }})

            # Navigate to the parent directory
            echo "Navigating to parent directory..."
            cd $PARENT_DIR
            if [ $? -ne 0 ]; then echo "Failed to navigate to parent directory"; exit 1; fi

            # Save current timestamp for backup directory name
            TIMESTAMP=$(date +%Y%m%d%H%M%S)

            # If the repo directory exists, rename it as a backup
            if [ -d "$REPO_DIR" ]; then
              echo "Creating backup of current repository..."
              mv $REPO_DIR ${REPO_DIR}_backup_${TIMESTAMP}
            fi

            # Clone the repository fresh
            echo "Cloning fresh repository..."
            git clone https://github.com/${{ github.repository }}.git $REPO_DIR
            if [ $? -ne 0 ]; then echo "Failed to clone repository"; exit 1; fi

            # Navigate to the newly cloned repository
            cd $REPO_DIR
            if [ $? -ne 0 ]; then echo "Failed to navigate to repository directory"; exit 1; fi

            # Checkout the dev branch
            echo "Checking out dev branch..."
            git checkout dev
            if [ $? -ne 0 ]; then echo "Failed to checkout dev branch"; exit 1; fi

            # Build Docker images on the server
            echo "Building Docker image on the server..."
            docker build --platform linux/amd64 -t tenxegineer/qalb-service:dev .
            if [ $? -ne 0 ]; then echo "Failed to build Docker image"; exit 1; fi

            # Zero-downtime deployment strategy
            echo "Performing zero-downtime deployment..."

            # Get the current container ID if it exists
            CURRENT_CONTAINER=$(docker ps --filter "name=qalb-service" -q)

            # Start the new container
            echo "Starting new container..."
            docker-compose -f docker-compose.yml up -d --no-deps --scale qalb-service=1 --no-recreate --renew-anon-volumes
            if [ $? -ne 0 ]; then echo "Failed to start new container"; exit 1; fi

            # Wait for the new container to be healthy (adjust as needed)
            echo "Waiting for new container to be ready..."
            sleep 10

            # Check if the new container is running
            NEW_CONTAINER=$(docker ps --filter "name=qalb-service" -q)
            if [ -z "$NEW_CONTAINER" ]; then
              echo "New container failed to start properly"; exit 1;
            fi

            # If we had a previous container and it's different from the new one, stop it
            if [ ! -z "$CURRENT_CONTAINER" ] && [ "$CURRENT_CONTAINER" != "$NEW_CONTAINER" ]; then
              echo "Stopping old container..."
              docker stop $CURRENT_CONTAINER
              docker rm $CURRENT_CONTAINER
            fi

            # Optional: Clean up dangling Docker images (images without tags)
            echo "Cleaning up dangling images..."
            docker image prune -f

            # Remove old backups older than 7 days
            echo "Cleaning up old backups..."
            find $PARENT_DIR -name "${REPO_DIR}_backup_*" -type d -mtime +7 -exec rm -rf {} \;

            echo "Deployment successful!"
